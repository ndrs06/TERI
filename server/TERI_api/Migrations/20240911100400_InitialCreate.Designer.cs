// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TERI_api.Data;

#nullable disable

namespace TERI_api.Migrations
{
    [DbContext(typeof(TERI_Context))]
    [Migration("20240911100400_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TERI_api.Model.DataModel.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurabilityType")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryFoodSlotId")
                        .HasColumnType("int");

                    b.Property<int?>("MealId")
                        .HasColumnType("int");

                    b.Property<string>("MealTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Portion")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryFoodSlotId");

                    b.HasIndex("MealId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AvgPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IngredientCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryIngredientSlotId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryIngredientSlotId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.IngredientCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IngredientCategories");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.InventoryFoodSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryFoodSlot");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.InventoryIngredientSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryIngredientSlot");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MealType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.RecipeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RecipeCategories");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Food", b =>
                {
                    b.HasOne("TERI_api.Model.DataModel.InventoryFoodSlot", null)
                        .WithMany("Foods")
                        .HasForeignKey("InventoryFoodSlotId");

                    b.HasOne("TERI_api.Model.DataModel.Meal", null)
                        .WithMany("Foods")
                        .HasForeignKey("MealId");

                    b.HasOne("TERI_api.Model.DataModel.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Ingredient", b =>
                {
                    b.HasOne("TERI_api.Model.DataModel.InventoryIngredientSlot", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("InventoryIngredientSlotId");

                    b.HasOne("TERI_api.Model.DataModel.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Inventory", b =>
                {
                    b.HasOne("TERI_api.Model.DataModel.User", null)
                        .WithOne("Inventory")
                        .HasForeignKey("TERI_api.Model.DataModel.Inventory", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.InventoryFoodSlot", b =>
                {
                    b.HasOne("TERI_api.Model.DataModel.Inventory", null)
                        .WithMany("FoodSlots")
                        .HasForeignKey("InventoryId");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.InventoryIngredientSlot", b =>
                {
                    b.HasOne("TERI_api.Model.DataModel.Inventory", null)
                        .WithMany("IngredientSlots")
                        .HasForeignKey("InventoryId");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Meal", b =>
                {
                    b.HasOne("TERI_api.Model.DataModel.User", null)
                        .WithMany("Meals")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Recipe", b =>
                {
                    b.HasOne("TERI_api.Model.DataModel.User", null)
                        .WithMany("FavoriteRecipes")
                        .HasForeignKey("UserId");

                    b.HasOne("TERI_api.Model.DataModel.User", null)
                        .WithMany("RecipeCollection")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Inventory", b =>
                {
                    b.Navigation("FoodSlots");

                    b.Navigation("IngredientSlots");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.InventoryFoodSlot", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.InventoryIngredientSlot", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Meal", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.Recipe", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("TERI_api.Model.DataModel.User", b =>
                {
                    b.Navigation("FavoriteRecipes");

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Meals");

                    b.Navigation("RecipeCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
